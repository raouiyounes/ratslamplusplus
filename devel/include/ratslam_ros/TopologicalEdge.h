// Generated by gencpp from file ratslam_ros/TopologicalEdge.msg
// DO NOT EDIT!


#ifndef RATSLAM_ROS_MESSAGE_TOPOLOGICALEDGE_H
#define RATSLAM_ROS_MESSAGE_TOPOLOGICALEDGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace ratslam_ros
{
template <class ContainerAllocator>
struct TopologicalEdge_
{
  typedef TopologicalEdge_<ContainerAllocator> Type;

  TopologicalEdge_()
    : id(0)
    , source_id(0)
    , destination_id(0)
    , duration()
    , transform()  {
    }
  TopologicalEdge_(const ContainerAllocator& _alloc)
    : id(0)
    , source_id(0)
    , destination_id(0)
    , duration()
    , transform(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _source_id_type;
  _source_id_type source_id;

   typedef uint32_t _destination_id_type;
  _destination_id_type destination_id;

   typedef ros::Duration _duration_type;
  _duration_type duration;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;





  typedef boost::shared_ptr< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> const> ConstPtr;

}; // struct TopologicalEdge_

typedef ::ratslam_ros::TopologicalEdge_<std::allocator<void> > TopologicalEdge;

typedef boost::shared_ptr< ::ratslam_ros::TopologicalEdge > TopologicalEdgePtr;
typedef boost::shared_ptr< ::ratslam_ros::TopologicalEdge const> TopologicalEdgeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ratslam_ros::TopologicalEdge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ratslam_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ratslam_ros': ['/home/younes/eclipse-workspace/Hamburg_Lim/src/ratslam_python/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5998f5af8b3f0379746951076b5511a";
  }

  static const char* value(const ::ratslam_ros::TopologicalEdge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5998f5af8b3f037ULL;
  static const uint64_t static_value2 = 0x9746951076b5511aULL;
};

template<class ContainerAllocator>
struct DataType< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ratslam_ros/TopologicalEdge";
  }

  static const char* value(const ::ratslam_ros::TopologicalEdge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n\
uint32 source_id\n\
uint32 destination_id\n\
duration duration\n\
geometry_msgs/Transform transform\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ratslam_ros::TopologicalEdge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.source_id);
      stream.next(m.destination_id);
      stream.next(m.duration);
      stream.next(m.transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopologicalEdge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ratslam_ros::TopologicalEdge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ratslam_ros::TopologicalEdge_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "source_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.source_id);
    s << indent << "destination_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.destination_id);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RATSLAM_ROS_MESSAGE_TOPOLOGICALEDGE_H
